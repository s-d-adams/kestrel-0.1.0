(inc"stdio.h")(inc"GL/glut.h")(inc"unistd.h")(def Colour struct((r double)(g double)(b double)))(def Model struct((x double)(y double)(w double)(h double)(colour Colour)))(def gModel(mutable(ptr(mutable Model)))null)(def stepX((x double)double)(cond((< x 1.0)(+ x 0.01))-1.5))(def stepR((r double)double)(cond((< r 1.0)(+ r 0.01))0.0))(def stepG((g double)double)(cond((< g 1.0)(+ g 0.033))0.0))(def stepB((b double)double)(cond((< b 1.0)(+ b 0.025))0.0))(def stepColour((prev Colour)Colour)(Colour((r(stepR(prev r)))(g(stepG(prev g)))(b(stepB(prev b))))))(def step((prev Model)Model)(Model((x(stepX(prev x)))(y(prev y))(w(prev w))(h(prev h))(colour(stepColour(prev colour))))))(def i(mutable double)-1.5)(def display(imp void)(let(m(deref gModel))(do(glClear GL_COLOR_BUFFER_BIT)(glColor3f(m colour r)(m colour g)(m colour b))(glBegin GL_POLYGON)(glVertex3f(m x)(m y)0.0)(glVertex3f(+(m x)(m w))(m y)0.0)(glVertex3f(+(m x)(m w))(+(m y)(m h))0.0)(glVertex3f(m x)(+(m y)(m h))0.0)(glEnd)(glFlush))))(def array_test((array int))((array int)(1 2 3 4)))(def map_test_fn((i int)int)(+ i 1))(def map_test((array int))(map(array_test)map_test_fn))(def print_int(imp(i int)void)(printf"%d\n"i))(def idle(imp void)(do(usleep 17000)(assign(deref gModel)(step(deref gModel)))(glutPostRedisplay)))(def main(imp(argc(mutable int))(argv(ptr(mutable(ptr(mutable char)))))int)(let(m((mutable Model)((x 0.0)(y 0.0)(w 1.0)(h 1.0)(colour(Colour((r 1.0)(g 1.0)(b 1.0)))))))(do(doEach(map_test)print_int)(assign gModel(addr m))(glutInit(addr argc)argv)(glutInitDisplayMode GLUT_SINGLE)(glutInitWindowSize 300 300)(glutInitWindowPosition 100 100)(glutCreateWindow"Hello world!")(glutDisplayFunc display)(glutIdleFunc idle)(glutMainLoop)0)))